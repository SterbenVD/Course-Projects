// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  name       String
  address    String?
  phone      String?
  memberType String
  password   String
  createdAt  DateTime   @default(now())
  Fine       Fine[]
  requests   Requests[]
  reserve    Reserve[]
  issue      Issue[]
  votes      Votes[]
}

// insert into user (1, 'vid', 'vish', 'lol', '9821', 'member', '1234', '2021-09-01T00:00:00.000Z');

model Book {
  id        String    @id @default(cuid())
  title     String
  author    String
  ISBN      String
  publisher String
  copies    Int       @default(0)
  Fine      Fine[]
  reserve   Reserve[]
  issue     Issue[]
  createdAt DateTime  @default(now())
}

model Fine {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  amount    Int
  reason    String
  createdAt DateTime @default(now())
}

model Requests {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  request_name   String
  request_status String
  createdAt      DateTime @default(now())
  votes          Votes[]
}

model Reserve {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  book           Book     @relation(fields: [bookId], references: [id])
  bookId         String
  reserve_status String
  createdAt      DateTime @default(now())
}

model Issue {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  book         Book     @relation(fields: [bookId], references: [id])
  bookId       String
  issue_status String
  createdAt    DateTime @default(now())
  deadline     DateTime
}

model Votes {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  request   Requests @relation(fields: [requestId], references: [id])
  requestId String
  vote      Int
  createdAt DateTime @default(now())
}